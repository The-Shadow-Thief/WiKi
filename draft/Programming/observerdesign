#title Observer Pattern


<p>
* Observer

** problem

- 希望当数据发生变化时，系统展示部分也随之变化。产生联动效果。
- 展示部分也可能有多种变化，应该适应其扩展性。

如书中的例子，天气预报的问题，当预测中心把预测的天气温度、湿度、风力等
信息更新之后，数据的显示终端能够及时发生变化，此外随之客户的需求，增添多种形式的显示终端。
这种情况下需要用到observer模式。

** implement

这里实现observer模式，有两种模式：pull和push两种模式。pull指的是，首先publisher通知subscriber有数据变化，
然后在subscriber从publisher获取数据，并显示出来。push指的是，publisher通知subscriber有数据变化，并把数据
推送到publisher，然后publisher将数据显示出来。

<example>
Design Principle:
1. Publisher + Subscriber = Observer Pattern
2. Strive for loosely coupled designs between objects that interact.

Observer Pattern defines a one-to-many dependency between objects 
so that when one object changes state, all of its dependents 
are notified and updated automatically.
</example>

push UML:

[[observer_2.gif][push UML]]

pull UML:

[[observer_1.gif][pull UML]]

嗯，从上面看应该都是pull模式，这种模式比push模式好一点时，push是把所有的数据都发过来，可能有些不需要的数据也都发过来了。
push的方法，就是把数据通过update的参数的形式发给observer。
pull的模式就只取自己需要的数据，通过调用get***的方法来实现提取数据。

C# code example in HOME/cs/designpattern/obsever.cs.

</p>

[[designpattern.html][UP]]
